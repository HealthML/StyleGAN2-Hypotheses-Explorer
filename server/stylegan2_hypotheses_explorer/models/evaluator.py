# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from ..util import deserialize_model
from .base_model_ import Base_Model
from .model import Model  # noqa: F401,E501


class Evaluator(Base_Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int = None, name: str = None):  # noqa: E501
        """Evaluator - a model defined in Swagger

        :param id: The id of this Evaluator.  # noqa: E501
        :type id: int
        :param name: The name of this Evaluator.  # noqa: E501
        :type name: str
        """
        self.swagger_types = {
            'id': int,
            'name': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name'
        }
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'Evaluator':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Evaluator of this Evaluator.  # noqa: E501
        :rtype: Evaluator
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Evaluator.

        Unique id of this model  # noqa: E501

        :return: The id of this Evaluator.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Evaluator.

        Unique id of this model  # noqa: E501

        :param id: The id of this Evaluator.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Evaluator.

        Human readable name of the model  # noqa: E501

        :return: The name of this Evaluator.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Evaluator.

        Human readable name of the model  # noqa: E501

        :param name: The name of this Evaluator.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name
