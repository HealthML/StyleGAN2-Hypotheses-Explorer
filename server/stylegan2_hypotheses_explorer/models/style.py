# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from ..util import deserialize_model
from .base_model_ import Base_Model
from .style_configuration import StyleConfiguration  # noqa: F401,E501


class Style(Base_Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, generator_id: int = None, style: StyleConfiguration = None):  # noqa: E501
        """Style - a model defined in Swagger

        :param generator_id: The generator_id of this Style.  # noqa: E501
        :type generator_id: int
        :param style: The style of this Style.  # noqa: E501
        :type style: StyleConfiguration
        """
        self.swagger_types = {
            'generator_id': int,
            'style': StyleConfiguration
        }

        self.attribute_map = {
            'generator_id': 'generatorId',
            'style': 'style'
        }
        self._generator_id = generator_id
        self._style = style

    @classmethod
    def from_dict(cls, dikt) -> 'Style':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Style of this Style.  # noqa: E501
        :rtype: Style
        """
        return deserialize_model(dikt, cls)

    @property
    def generator_id(self) -> int:
        """Gets the generator_id of this Style.


        :return: The generator_id of this Style.
        :rtype: int
        """
        return self._generator_id

    @generator_id.setter
    def generator_id(self, generator_id: int):
        """Sets the generator_id of this Style.


        :param generator_id: The generator_id of this Style.
        :type generator_id: int
        """
        if generator_id is None:
            raise ValueError("Invalid value for `generator_id`, must not be `None`")  # noqa: E501

        self._generator_id = generator_id

    @property
    def style(self) -> StyleConfiguration:
        """Gets the style of this Style.


        :return: The style of this Style.
        :rtype: StyleConfiguration
        """
        return self._style

    @style.setter
    def style(self, style: StyleConfiguration):
        """Sets the style of this Style.


        :param style: The style of this Style.
        :type style: StyleConfiguration
        """
        if style is None:
            raise ValueError("Invalid value for `style`, must not be `None`")  # noqa: E501

        self._style = style
