# coding: utf-8

from __future__ import absolute_import

from typing import List  # noqa: F401

from ..util import deserialize_model
from .base_model_ import Base_Model


class GeneratorSettings(Base_Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, num_gen_styles_per_layer: int = None, use_same_styles_for_all_layers: bool = None, reduce_number_of_layers_by: int = None, styles_from_images: List[str] = None, optimize_styles: float = None):  # noqa: E501
        """GeneratorSettings - a model defined in Swagger

        :param num_gen_styles_per_layer: The num_gen_styles_per_layer of this GeneratorSettings.  # noqa: E501
        :type num_gen_styles_per_layer: int
        :param use_same_styles_for_all_layers: The use_same_styles_for_all_layers of this GeneratorSettings.  # noqa: E501
        :type use_same_styles_for_all_layers: bool
        :param reduce_number_of_layers_by: The reduce_number_of_layers_by of this GeneratorSettings.  # noqa: E501
        :type reduce_number_of_layers_by: int
        :param styles_from_images: The styles_from_images of this GeneratorSettings.  # noqa: E501
        :type styles_from_images: List[str]
        :param optimize_styles: The optimize_styles of this GeneratorSettings.  # noqa: E501
        :type optimize_styles: float
        """
        self.swagger_types = {
            'num_gen_styles_per_layer': int,
            'use_same_styles_for_all_layers': bool,
            'reduce_number_of_layers_by': int,
            'styles_from_images': List[str],
            'optimize_styles': float
        }

        self.attribute_map = {
            'num_gen_styles_per_layer': 'numGenStylesPerLayer',
            'use_same_styles_for_all_layers': 'useSameStylesForAllLayers',
            'reduce_number_of_layers_by': 'reduceNumberOfLayersBy',
            'styles_from_images': 'stylesFromImages',
            'optimize_styles': 'optimizeStyles'
        }
        self._num_gen_styles_per_layer = num_gen_styles_per_layer
        self._use_same_styles_for_all_layers = use_same_styles_for_all_layers
        self._reduce_number_of_layers_by = reduce_number_of_layers_by
        self._styles_from_images = styles_from_images
        self._optimize_styles = optimize_styles

    @classmethod
    def from_dict(cls, dikt) -> 'GeneratorSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GeneratorSettings of this GeneratorSettings.  # noqa: E501
        :rtype: GeneratorSettings
        """
        return deserialize_model(dikt, cls)

    @property
    def num_gen_styles_per_layer(self) -> int:
        """Gets the num_gen_styles_per_layer of this GeneratorSettings.

        Number of styles per layer  # noqa: E501

        :return: The num_gen_styles_per_layer of this GeneratorSettings.
        :rtype: int
        """
        return self._num_gen_styles_per_layer

    @num_gen_styles_per_layer.setter
    def num_gen_styles_per_layer(self, num_gen_styles_per_layer: int):
        """Sets the num_gen_styles_per_layer of this GeneratorSettings.

        Number of styles per layer  # noqa: E501

        :param num_gen_styles_per_layer: The num_gen_styles_per_layer of this GeneratorSettings.
        :type num_gen_styles_per_layer: int
        """
        if num_gen_styles_per_layer is None:
            raise ValueError("Invalid value for `num_gen_styles_per_layer`, must not be `None`")  # noqa: E501

        self._num_gen_styles_per_layer = num_gen_styles_per_layer

    @property
    def use_same_styles_for_all_layers(self) -> bool:
        """Gets the use_same_styles_for_all_layers of this GeneratorSettings.

        If true the style images per layer will look the same  # noqa: E501

        :return: The use_same_styles_for_all_layers of this GeneratorSettings.
        :rtype: bool
        """
        return self._use_same_styles_for_all_layers

    @use_same_styles_for_all_layers.setter
    def use_same_styles_for_all_layers(self, use_same_styles_for_all_layers: bool):
        """Sets the use_same_styles_for_all_layers of this GeneratorSettings.

        If true the style images per layer will look the same  # noqa: E501

        :param use_same_styles_for_all_layers: The use_same_styles_for_all_layers of this GeneratorSettings.
        :type use_same_styles_for_all_layers: bool
        """
        if use_same_styles_for_all_layers is None:
            raise ValueError("Invalid value for `use_same_styles_for_all_layers`, must not be `None`")  # noqa: E501

        self._use_same_styles_for_all_layers = use_same_styles_for_all_layers

    @property
    def reduce_number_of_layers_by(self) -> int:
        """Gets the reduce_number_of_layers_by of this GeneratorSettings.

        Reducing the number of layers groups together layers in the view. e.g. if 2 layers are reduced the first and second displayed layer will actually be the first and second, and the third and fourth layers.  # noqa: E501

        :return: The reduce_number_of_layers_by of this GeneratorSettings.
        :rtype: int
        """
        return self._reduce_number_of_layers_by

    @reduce_number_of_layers_by.setter
    def reduce_number_of_layers_by(self, reduce_number_of_layers_by: int):
        """Sets the reduce_number_of_layers_by of this GeneratorSettings.

        Reducing the number of layers groups together layers in the view. e.g. if 2 layers are reduced the first and second displayed layer will actually be the first and second, and the third and fourth layers.  # noqa: E501

        :param reduce_number_of_layers_by: The reduce_number_of_layers_by of this GeneratorSettings.
        :type reduce_number_of_layers_by: int
        """
        if reduce_number_of_layers_by is None:
            raise ValueError("Invalid value for `reduce_number_of_layers_by`, must not be `None`")  # noqa: E501

        self._reduce_number_of_layers_by = reduce_number_of_layers_by

    @property
    def styles_from_images(self) -> List[str]:
        """Gets the styles_from_images of this GeneratorSettings.

        If present the generated styles will create images similar to these images. The images are stored in base64 encoding.  # noqa: E501

        :return: The styles_from_images of this GeneratorSettings.
        :rtype: List[str]
        """
        return self._styles_from_images

    @styles_from_images.setter
    def styles_from_images(self, styles_from_images: List[str]):
        """Sets the styles_from_images of this GeneratorSettings.

        If present the generated styles will create images similar to these images. The images are stored in base64 encoding.  # noqa: E501

        :param styles_from_images: The styles_from_images of this GeneratorSettings.
        :type styles_from_images: List[str]
        """

        self._styles_from_images = styles_from_images

    @property
    def optimize_styles(self) -> float:
        """Gets the optimize_styles of this GeneratorSettings.

        If existent the generated styles will be optimized to one end of the evaluator ratings of the evaluation model with this id.  # noqa: E501

        :return: The optimize_styles of this GeneratorSettings.
        :rtype: float
        """
        return self._optimize_styles

    @optimize_styles.setter
    def optimize_styles(self, optimize_styles: float):
        """Sets the optimize_styles of this GeneratorSettings.

        If existent the generated styles will be optimized to one end of the evaluator ratings of the evaluation model with this id.  # noqa: E501

        :param optimize_styles: The optimize_styles of this GeneratorSettings.
        :type optimize_styles: float
        """

        self._optimize_styles = optimize_styles
